# Name: Create Release from Manifest
# Developer: incpi
# Description: 
# Automation: The workflow automates file generation, commits changes, and creates a GitHub release from manifest.json.
# Trigger: It triggers on pushes to the main branch, running a script to generate and commit files.
# -----------------------------------------If above fails below will not execute ---------------------------------------------
# Release: It extracts the version, finds ZIP files in the bin directory, and attaches them to the release, streamlining the process.
#__________________________________________________________________________________________________________________________

name: Create Release from Manifest

on:
  push:
    branches:
      - Master

jobs:
  generate_and_commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Generate files with the shell script
      - name: Run Shell Script and Commit Generated Files
        run: |
          # Make the shell script executable and run it
          chmod +x ./zip.sh
          ./zip.sh

          # Configure Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"

          # Add all newly generated files to Git
          git add *
          git commit -m "Zip are generated on $(date)"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prevent re-triggering the Workflow
        if: contains(github.event.head_commit.message, 'Zip are generated')
        run: echo "Skipping because this is the automated commit message from our script."

  release:
    runs-on: ubuntu-latest
    needs: generate_and_commit

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Extract version from manifest.json
        id: get_version
        run: |
            VERSION=$(jq -r '.version' manifest.json)
            echo "Extracted version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
  
      - name: Find the zip file in bin
        id: find_zip
        run: |
            ZIP_FILE=$(find ./bin -type f -name "*.zip")
            ZIP_BASENAME=$(basename "$ZIP_FILE")
            echo "Found zip file: $ZIP_FILE"
            echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
            echo "ZIP_BASENAME=$ZIP_BASENAME" >> $GITHUB_ENV  # Save the zip file's name without the path
  
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Version_${{ env.VERSION }}
          name: Extension @${{ env.VERSION }} # release name
          body: "Release created with version ${{ env.VERSION }}"
  
      - name: Attach zip file with clean name to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_FILE }} # Full path zip file
          asset_name: ${{ env.ZIP_BASENAME }} # Clean zip file name without the path
          asset_content_type: application/zip